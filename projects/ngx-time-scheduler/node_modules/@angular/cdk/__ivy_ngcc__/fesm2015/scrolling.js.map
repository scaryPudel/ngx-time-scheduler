{"version":3,"file":"scrolling.js","sources":["../../../../../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../../../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../../../../../src/cdk/scrolling/scroll-dispatcher.ts","../../../../../../src/cdk/scrolling/scrollable.ts","../../../../../../src/cdk/scrolling/viewport-ruler.ts","../../../../../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../../../../../src/cdk/scrolling/virtual-for-of.ts","../../../../../../src/cdk/scrolling/scrolling-module.ts","../../../../../../src/cdk/scrolling/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() { /* no-op */ }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() { /* no-op */ }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength,\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0,\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n  }],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number { return this._itemSize; }\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number { return this._minBufferPx; }\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number { return this._maxBufferPx; }\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy =\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n\n  static ngAcceptInputType_itemSize: NumberInput;\n  static ngAcceptInputType_minBufferPx: NumberInput;\n  static ngAcceptInputType_maxBufferPx: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(private _ngZone: NgZone,\n              private _platform: Platform,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n  }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n          .subscribe(() => this._scrolled.next(scrollable)));\n    }\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable|void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n    let element: HTMLElement | null = elementRef.nativeElement;\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element!.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  getRtlScrollAxisType,\n  RtlScrollAxisType,\n  supportsScrollBehavior\n} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  private _destroyed = new Subject();\n\n  private _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n      this.ngZone.runOutsideAngular(() =>\n          fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n              .subscribe(observer)));\n\n  constructor(protected elementRef: ElementRef<HTMLElement>,\n              protected scrollDispatcher: ScrollDispatcher,\n              protected ngZone: NgZone,\n              @Optional() protected dir?: Directionality) {}\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n          el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n            el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n            el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change: Observable<Event>;\n\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\n  private _invalidateCache: Subscription;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(private _platform: Platform,\n              ngZone: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n\n    ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n\n      this._change = _platform.isBrowser ?\n          merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n          observableOf();\n\n      // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._getDocument();\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Subject,\n  Observer,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {ViewportRuler} from './viewport-ruler';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n    typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport,\n  }]\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output() scrolledIndexChange: Observable<number> =\n      new Observable((observer: Observer<number>) =>\n        this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n            Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = '';\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = '';\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualForOf. */\n  private _forOf: CdkVirtualForOf<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  constructor(public elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              ngZone: NgZone,\n              @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                  private _scrollStrategy: VirtualScrollStrategy,\n              @Optional() dir: Directionality,\n              scrollDispatcher: ScrollDispatcher,\n              /**\n               * @deprecated `viewportRuler` parameter to become required.\n               * @breaking-change 11.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n    if (viewportRuler) {\n      this._viewportChanges = viewportRuler.change().subscribe(() => {\n        this.checkViewportSize();\n      });\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n\n      this.elementScrolled()\n          .pipe(\n              // Start off with a fake scroll event so we properly detect our initial position.\n              startWith(null!),\n              // Collect multiple events into one until the next animation frame. This way if\n              // there are multiple scroll events in the same frame we only need to recheck\n              // our layout once.\n              auditTime(0, SCROLL_SCHEDULER))\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\n  attach(forOf: CdkVirtualForOf<any>) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    return from ?\n      super.measureScrollOffset(from) :\n      super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ?\n        viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight =\n        this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth =\n        this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\n  /** Emits when the rendered view of the data changes. */\n  viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // Slice the value if its an NgIterable to ensure we're working with an array.\n      this._dataSourceChanges.next(new ArrayDataSource<T>(\n          isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n    }\n  }\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ?\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n        undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n  /** Emits whenever the data in the current DataSource changes. */\n  dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n      .pipe(\n          // Start off with null `DataSource`.\n          startWith(null!),\n          // Bundle up the previous and current data sources so we can work with both.\n          pairwise(),\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n          // Replay the last emitted data when someone subscribes.\n          shareReplay(1));\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: T[] | ReadonlyArray<T>;\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   */\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private _destroyed = new Subject<void>();\n\n  constructor(\n      /** The view container to add items to. */\n      private _viewContainerRef: ViewContainerRef,\n      /** The template to use when stamping out new items. */\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n      /** The set of available differs. */\n      private _differs: IterableDiffers,\n      /** The virtual scrolling viewport that these items are being rendered in. */\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n      ngZone: NgZone) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all root nodes for all items in the range and sum up their size.\n    let totalSize = 0;\n    let i = rangeLen;\n    while (i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, view!.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next();\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T> | null):\n    Observable<T[] | ReadonlyArray<T>> {\n\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n      if (record.previousIndex == null) {  // Item added.\n        const view = this._insertViewForNewItem(currentIndex!);\n        view.context.$implicit = record.item;\n      } else if (currentIndex == null) {  // Item removed.\n        this._cacheView(this._detachView(adjustedPreviousIndex !));\n      } else {  // Item moved.\n        const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n        this._viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = record.item;\n      }\n    });\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Cache the given detached view. */\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      const index = this._viewContainerRef.indexOf(view);\n\n      // It's very unlikely that the index will ever be -1, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        this._viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a view for a new item, either from the cache or by creating a new one. */\n  private _insertViewForNewItem(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  /** Creates a new embedded view and moves it to the given index */\n  private _createEmbeddedViewAt(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: null!,\n      // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n      // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n      cdkVirtualForOf: this._cdkVirtualForOf!,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    }, index);\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>>|null {\n    const cachedView = this._templateCache.pop();\n    if (cachedView) {\n      this._viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n\n  /** Detaches the embedded view at the given index. */\n  private _detachView(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._viewContainerRef.detach(index) as\n        EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  exports: [CdkScrollable],\n  declarations: [CdkScrollable]\n})\nexport class CdkScrollableModule {}\n\n@NgModule({\n  imports: [\n    BidiModule,\n    PlatformModule,\n    CdkScrollableModule\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}